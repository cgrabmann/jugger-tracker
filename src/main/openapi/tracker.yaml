openapi: 3.0.1
info:
  title: Jugger Tracker API
  description: Jugger Tracker API
  version: 1.0.0

servers:
  - url: 'https://jugger.derletztedodo.at'

paths:
  /api/users:
    get:
      tags:
        - User
      summary: Returns a list of users.
      operationId: getUsers
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    put:
      tags:
        - User
      summary: creates a new User
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              required: true
              $ref: '#/components/schemas/UserData'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /api/users/{id}:
    get:
      tags:
        - User
      summary: Returns a User with ID
      operationId: getUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: user ID
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    post:
      tags:
        - User
      summary: Updates a User with ID
      operationId: updateUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: user ID
      requestBody:
        content:
          application/json:
            schema:
              required: true
              $ref: '#/components/schemas/UserData'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      tags:
        - User
      summary: Delete a User with ID
      operationId: deleteUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: user ID
      responses:
        200:
          description: OK


  /api/authentication/requestToken:
    post:
      tags:
        - Authentication
      summary: Creates a new login token and send it by email
      operationId: requestLoginToken
      requestBody:
        description: Email address of the user that wants to login
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        200:
          description: OK

  /api/authentication/{tokenId}:
    get:
      tags:
        - Authentication
      summary: Authenticates by using a login token
      operationId: authenticate
      parameters:
        - in: path
          name: tokenId
          required: true
          schema:
            type: string
          description: token ID
      responses:
        200:
          description: OK


  /api/trainings:
    get:
      tags:
        - Training
      summary: Returns a list of all trainings
      operationId: getTrainings
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Training'
    put:
      tags:
        - Training
      summary: Creates a new training
      operationId: createTraining
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Training'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'

  /api/trainings/{date}:
    get:
      tags:
        - Training
      summary: Returns a training by date
      operationId: getTraining
      parameters:
        - in: path
          name: date
          required: true
          schema:
            type: string
            format: date
          description: training date
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'
    post:
      tags:
        - Training
      summary: Updates a training by date
      operationId: updateTraining
      parameters:
        - in: path
          name: date
          required: true
          schema:
            type: string
            format: date
          description: training date
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Training'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'
    delete:
      tags:
        - Training
      summary: Deletes a training by date
      operationId: deleteTraining
      parameters:
        - in: path
          name: date
          required: true
          schema:
            type: string
            format: date
          description: training date
      responses:
        200:
          description: OK

components:
  schemas:
    UserData:
      type: object
      required:
        - firstName
        - lastName
        - email
        - trackable
      properties:
        firstName:
          type: string
          maxLength: 20
        lastName:
          type: string
          maxLength: 20
        email:
          type: string
          maxLength: 50
          format: email
        trackable:
          type: boolean
        role:
          type: string
          enum: [mitglied, trainer, admin]
    User:
      allOf:
        - $ref: '#/components/schemas/UserData'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
              readOnly: true
    Training:
      properties:
        date:
          type: string
          format: date
        type:
          type: string
          enum: [klein, gro√ü, spezial]
        participants:
          type: array
          items:
            $ref: '#/components/schemas/User'
